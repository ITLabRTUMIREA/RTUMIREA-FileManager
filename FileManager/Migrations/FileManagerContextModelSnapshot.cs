// <auto-generated />
using System;
using FileManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FileManager.Migrations
{
    [DbContext(typeof(FileManagerContext))]
    partial class FileManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FileManager.Models.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("FileManager.Models.DepartmentsDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DepartmentID");

                    b.Property<Guid>("YearDocumentTitleID");

                    b.HasKey("ID");

                    b.HasAlternateKey("DepartmentID", "YearDocumentTitleID");

                    b.HasIndex("YearDocumentTitleID");

                    b.ToTable("DepartmentsDocument");
                });

            modelBuilder.Entity("FileManager.Models.DepartmentsDocumentsVersion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DepartmentDocumentID");

                    b.Property<short>("Version");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentDocumentID");

                    b.ToTable("DepartmentsDocumentsVersion");
                });

            modelBuilder.Entity("FileManager.Models.DocumentStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status");

                    b.HasKey("ID");

                    b.ToTable("DocumentStatus");
                });

            modelBuilder.Entity("FileManager.Models.DocumentStatusHistory", b =>
                {
                    b.Property<Guid>("DocumentStatusID");

                    b.Property<Guid>("DepartmentsDocumentID");

                    b.Property<string>("CommentEdits");

                    b.Property<Guid>("ID");

                    b.HasKey("DocumentStatusID", "DepartmentsDocumentID");

                    b.HasIndex("DepartmentsDocumentID");

                    b.ToTable("DocumentStatusHistory");
                });

            modelBuilder.Entity("FileManager.Models.DocumentTitle", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DocumentTypeID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.ToTable("DocumentTitle");
                });

            modelBuilder.Entity("FileManager.Models.DocumentType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("FileManager.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FileManager.Models.RoleStatus", b =>
                {
                    b.Property<Guid>("RoleID");

                    b.Property<Guid>("DocumentStatusID");

                    b.Property<Guid>("ID");

                    b.HasKey("RoleID", "DocumentStatusID");

                    b.HasIndex("DocumentStatusID");

                    b.ToTable("RoleStatus");
                });

            modelBuilder.Entity("FileManager.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FistName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FileManager.Models.Year", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("FileManager.Models.YearDocumentTitle", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DocumentTitleID");

                    b.Property<Guid>("YearID");

                    b.HasKey("ID");

                    b.HasAlternateKey("DocumentTitleID", "YearID");

                    b.HasIndex("YearID");

                    b.ToTable("YearDocumentTitle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FileManager.Models.UserRoleDepartment", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.Property<Guid>("DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator().HasValue("UserRoleDepartment");
                });

            modelBuilder.Entity("FileManager.Models.DepartmentsDocument", b =>
                {
                    b.HasOne("FileManager.Models.Department", "Department")
                        .WithMany("DepartmentsDocuments")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileManager.Models.YearDocumentTitle", "YearDocumentTitle")
                        .WithMany("DepartmentsDocuments")
                        .HasForeignKey("YearDocumentTitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileManager.Models.DepartmentsDocumentsVersion", b =>
                {
                    b.HasOne("FileManager.Models.DepartmentsDocument", "DepartmentsDocument")
                        .WithMany("DepartmentsDocumentsVersions")
                        .HasForeignKey("DepartmentDocumentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileManager.Models.DocumentStatusHistory", b =>
                {
                    b.HasOne("FileManager.Models.DepartmentsDocument", "DepartmentsDocument")
                        .WithMany("DocumentStatusHistories")
                        .HasForeignKey("DepartmentsDocumentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileManager.Models.DocumentStatus", "DocumentStatus")
                        .WithMany("DocumentStatusHistories")
                        .HasForeignKey("DocumentStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileManager.Models.DocumentTitle", b =>
                {
                    b.HasOne("FileManager.Models.DocumentType", "DocumentType")
                        .WithMany("DocumentTitles")
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileManager.Models.RoleStatus", b =>
                {
                    b.HasOne("FileManager.Models.DocumentStatus", "DocumentStatus")
                        .WithMany("RoleStatuses")
                        .HasForeignKey("DocumentStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileManager.Models.Role", "Role")
                        .WithMany("RoleStatuses")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileManager.Models.YearDocumentTitle", b =>
                {
                    b.HasOne("FileManager.Models.DocumentTitle", "DocumentTitle")
                        .WithMany("YearDocumentTitles")
                        .HasForeignKey("DocumentTitleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileManager.Models.Year", "Year")
                        .WithMany("YearDocumentTitles")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FileManager.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FileManager.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FileManager.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FileManager.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileManager.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FileManager.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileManager.Models.UserRoleDepartment", b =>
                {
                    b.HasOne("FileManager.Models.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
